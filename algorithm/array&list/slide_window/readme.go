package main

//滑动窗口算法的思路是这样:
//1、我们在字符串S中使用双指针中的左右指针技巧,初始化left=right=0,把索引左闭右开区间[left,right)称为一个「窗口」。
//2、我们先不断地增加right指针扩大窗口[left,right),直到窗口中的字符串符合要求(包含了T中的所有字符)。
//3、此时,我们停止增加right,转而不断增加left指针缩小窗口[left,right),直到窗口中的字符串不再符合要求(不包含T中的所有字符了)。同时,每次增加加left,我们都要更新一轮结果。
//4、重复第2和第3步,直到right到达字符串S的尽头。
//
//现在开始套模板,只需要思考以下四个问题:
//1、当移动right扩大窗口,即加入字符时,应该更新哪些数据?
//2、什么条件下,窗口应该暂停扩大,开始移动left缩小窗口?
//3、当移动left缩小窗口,即移出字符时,应该更新哪些数居?
//4、我们要的结果应该在扩大窗口时还是缩小窗口时进行更新?

func main() {

}

// 滑动窗口算法框架
//func slidingWindow(s, t string) {
//	need, window := map[byte]int{}, map[byte]int{}
//	_ = window
//	for i := 0; i < len(t); i++ {
//		c := t[i]
//		need[c]++
//	}
//
//	left, right := 0, 0
//	for right < len(s) {
//		//c是将移入窗口的字符
//		c := s[right]
//		//右移窗口
//		right++
//		//进行窗口内数据一系列更新
//		//...
//		//fmt.Printf("window:[%d, %d)\n", left, right)
//
//		//判断左侧窗口是否要收紧
//		for /*条件*/ {
//			//d是将移出窗口的字符
//			d := s[left]
//			//左移窗口
//			left++
//			//进行窗口内数据一系列更新
//			//...
//		}
//	}
//}
